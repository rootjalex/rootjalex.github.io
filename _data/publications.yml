# oopsla2024burrito:
#   title: Compilation of Shape Operators on Sparse Arrays
#   abstract:
#   venue: "(to appear in) Proceedings of the ACM on Programming Languages (OOPSLA)"
#   acronym: OOPSLA
#   year: 2024
#   pdf:
#   image:
#   code:
#   acmdl:
#   month: October
#   authors:
#     - root
#     - yan
#     - liu
#     - gyurgyik
#     - bik
#     - kjolstad
#   bibtex:

# oopsla2024spconv:
#   title: Compiler Support for Sparse Tensor Convolutions
#   abstract:
#   venue: "(to appear in) Proceedings of the ACM on Programming Languages (OOPSLA)"
#   acronym: OOPSLA
#   year: 2024
#   pdf:
#   image:
#   code:
#   acmdl:
#   month: October
#   authors:
#     - liu
#     - root
#     - xu
#     - li
#     - kjolstad
#     - bik
#   bibtex:

scorch2024:
  title: "Scorch: A Library for Sparse Deep Learning"
  abstract:
  venue: "Under Submission"
  acronym: Draft
  year: 2024
  pdf: https://arxiv.org/pdf/2405.16883
  image:
  code:
  acmdl:
  month: May
  authors:
    - yan
    - root
    - gale
    - broman
    - kjolstad
  bibtex:

asplos2023:
  title: Fast Instruction Selection for Fast Digital Signal Processing
  abstract: "<p>
    Modern vector processors support a wide variety of instructions for fixed-point digital
    signal processing. These instructions sup- port a proliferation of rounding, saturating,
    and type conversion modes, and are often fused combinations of more primitive op- erations.
    While these are common idioms in fixed-point signal processing, it is difficult to use
    these operations in portable code. It is challenging for programmers to write down portable
    integer arithmetic in a C-like language that corresponds exactly to one of these instructions,
    and even more challenging for compilers to recognize when these instructions can be used. Our
    system, Pitch- fork, defines a portable fixed-point intermediate representation, FPIR, that
    captures common idioms in fixed-point code. FPIR can be used directly by programmers experienced
    with fixed-point, or Pitchfork can automatically lift from integer operations into FPIR using a
    term-rewriting system (TRS) composed of verified man- ual and automatically-synthesized rules.
    Pitchfork then lowers from FPIR into target-specific fixed-point instructions using a set of
    target-specific TRSs. We show that this approach improves run- time performance of portably-written
    fixed-point signal processing code in Halide, across a range of benchmarks, by geomean 1.31x on x86
    with AVX2, 1.82x on ARM Neon, and 2.44x on Hexagon HVX compared to a standard LLVM-based compiler flow,
    while maintaining or improving existing compile times.
    </p>"
  venue: "International Conference on Architectural Support for Programming Languages and Operating Systems (ASPLOS)"
  acronym: ASPLOS
  year: 2023
  pdf: /publications/asplos2023-pitchfork.pdf
  image: /assets/pitchfork_arch.png
  code: https://github.com/halide/Halide/tree/rootjalex/trs-codegen
  acmdl: https://doi.org/10.1145/3623278.3624768
  month: March
  authors:
    - root
    - ahmad
    - sharlet
    - adams
    - kamil
    - jrk
  bibtex: "@inproceedings{root2023pitchfork,
          <br>  author = {Root, Alexander J and Ahmad, Maaz Bin Safeer and Sharlet, Dillon and Adams, Andrew and Kamil, Shoaib and Ragan-Kelley, Jonathan},
          <br>  title = {Fast Instruction Selection for Fast Digital Signal Processing},
          <br>  year = {2024},
          <br>  isbn = {9798400703942},
          <br>  publisher = {Association for Computing Machinery},
          <br>  address = {New York, NY, USA},
          <br>  url = {https://doi.org/10.1145/3623278.3624768},
          <br>  doi = {10.1145/3623278.3624768},
          <br>  abstract = {Modern vector processors support a wide variety of instructions for fixed-point digital signal processing. These instructions support a proliferation of rounding, saturating, and type conversion modes, and are often fused combinations of more primitive operations. While these are common idioms in fixed-point signal processing, it is difficult to use these operations in portable code. It is challenging for programmers to write down portable integer arithmetic in a C-like language that corresponds exactly to one of these instructions, and even more challenging for compilers to recognize when these instructions can be used. Our system, Pitchfork, defines a portable fixed-point intermediate representation, FPIR, that captures common idioms in fixed-point code. FPIR can be used directly by programmers experienced with fixed-point, or Pitchfork can automatically lift from integer operations into FPIR using a term-rewriting system (TRS) composed of verified manual and automatically-synthesized rules. Pitchfork then lowers from FPIR into target-specific fixed-point instructions using a set of target-specific TRSs. We show that this approach improves runtime performance of portably-written fixed-point signal processing code in Halide, across a range of benchmarks, by geomean 1.31x on x86 with AVX2, 1.82x on ARM Neon, and 2.44x on Hexagon HVX compared to a standard LLVM-based compiler flow, while maintaining or improving existing compile times.},
          <br>  booktitle = {Proceedings of the 28th ACM International Conference on Architectural Support for Programming Languages and Operating Systems, Volume 4},
          <br>  pages = {125-137},
          <br>  numpages = {13},
          <br>  location = {Vancouver, BC, Canada},
          <br>  series = {ASPLOS '23}
          <br>}"

asplos2022:
  title: Vector Instruction Selection for Digital Signal Processors Using Program Synthesis
  abstract: "<p>
    Instruction selection, whereby input code represented in an intermediate representation is
    translated into executable instructions from the target platform, is often the most
    target-dependent component in optimizing compilers. Current approaches include pattern
    matching, which is brittle and tedious to design, or search-based methods, which are
    limited by scalability of the search algorithm. In this paper, we propose a new algorithm
    that first abstracts the target platform instructions into high-level uber-instructions,
    with each uber-instruction unifying multiple concrete instructions from the target platform.
    Program synthesis is used to lift input code sequences into semantically equivalent sequences
    of uber-instructions and then to lower from uber-instructions to machine code. Using 21 real-world
    benchmarks, we show that our synthesis-based instruction selection algorithm can generate instruction
    sequences for a hardware target, with the synthesized code performing up to 2.1x faster as compared
    to code generated by a professionally-developed optimizing compiler for the same platform.
    </p>"
  venue: "International Conference on Architectural Support for Programming Languages and Operating Systems (ASPLOS)"
  acronym: ASPLOS
  year: 2022
  pdf: /publications/asplos2022-rake.pdf
  image: /assets/rake_arch.png
  code: https://github.com/uwplse/rake
  acmdl: https://dl.acm.org/doi/10.1145/3503222.3507714
  month: March
  authors: 
    - ahmad
    - root_mit
    - adams
    - kamil
    - cheung
  bibtex: "@inproceedings{ahmad2022rake,
          <br>  author = {Ahmad, Maaz Bin Safeer and Root, Alexander J. and Adams, Andrew and Kamil, Shoaib and Cheung, Alvin},
          <br>  title = {Vector Instruction Selection for Digital Signal Processors Using Program Synthesis},
          <br>  year = {2022},
          <br>  isbn = {9781450392051},
          <br>  publisher = {Association for Computing Machinery},
          <br>  address = {New York, NY, USA},
          <br>  url = {https://doi.org/10.1145/3503222.3507714},
          <br>  doi = {10.1145/3503222.3507714},
          <br>  abstract = {Instruction selection, whereby input code represented in an intermediate representation is translated into executable instructions from the target platform, is often the most target-dependent component in optimizing compilers. Current approaches include pattern matching, which is brittle and tedious to design, or search-based methods, which are limited by scalability of the search algorithm. In this paper, we propose a new algorithm that first abstracts the target platform instructions into high-level uber-instructions, with each uber-instruction unifying multiple concrete instructions from the target platform. Program synthesis is used to lift input code sequences into semantically equivalent sequences of uber-instructions and then to lower from uber-instructions to machine code. Using 21 real-world benchmarks, we show that our synthesis-based instruction selection algorithm can generate instruction sequences for a hardware target, with the synthesized code performing up to 2.1x faster as compared to code generated by a professionally-developed optimizing compiler for the same platform.},
          <br>  booktitle = {Proceedings of the 27th ACM International Conference on Architectural Support for Programming Languages and Operating Systems},
          <br>  pages = {1004-1016},
          <br>  numpages = {13},
          <br>  keywords = {Instruction selection, program synthesis, compiler optimizations},
          <br>  location = {Lausanne, Switzerland},
          <br>  series = {ASPLOS '22}
          <br>}"
