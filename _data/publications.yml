asplos2022: 
  title: Vector Instruction Selection for Digital Signal Processors Using Program Synthesis
  abstract: "<p>
    Instruction selection, whereby input code represented in an intermediate representation is
    translated into executable instructions from the target platform, is often the most
    target-dependent component in optimizing compilers. Current approaches include pattern
    matching, which is brittle and tedious to design, or search-based methods, which are
    limited by scalability of the search algorithm. In this paper, we propose a new algorithm
    that first abstracts the target platform instructions into high-level uber-instructions,
    with each uber-instruction unifying multiple concrete instructions from the target platform.
    Program synthesis is used to lift input code sequences into semantically equivalent sequences
    of uber-instructions and then to lower from uber-instructions to machine code. Using 21 real-world
    benchmarks, we show that our synthesis-based instruction selection algorithm can generate instruction
    sequences for a hardware target, with the synthesized code performing up to 2.1x faster as compared
    to code generated by a professionally-developed optimizing compiler for the same platform.
    </p>"
  venue: "International Conference on Architectural Support for Programming Languages and Operating Systems (ASPLOS)"
  year: 2022
  pdf: /publications/asplos2022-rake.pdf
  image: /assets/rake_arch.png
  code: https://github.com/uwplse/rake
  acmdl: https://dl.acm.org/doi/10.1145/3503222.3507714
  month: March
  authors: 
    - ahmad
    - root_mit
    - adams
    - kamil
    - cheung
  bibtex: "@inproceedings{10.1145/3503222.3507714,
          <br>  author = {Ahmad, Maaz Bin Safeer and Root, Alexander J. and Adams, Andrew and Kamil, Shoaib and Cheung, Alvin},
          <br>  title = {Vector Instruction Selection for Digital Signal Processors Using Program Synthesis},
          <br>  year = {2022},
          <br>  isbn = {9781450392051},
          <br>  publisher = {Association for Computing Machinery},
          <br>  address = {New York, NY, USA},
          <br>  url = {https://doi.org/10.1145/3503222.3507714},
          <br>  doi = {10.1145/3503222.3507714},
          <br>  abstract = {Instruction selection, whereby input code represented in an intermediate representation is translated into executable instructions from the target platform, is often the most target-dependent component in optimizing compilers. Current approaches include pattern matching, which is brittle and tedious to design, or search-based methods, which are limited by scalability of the search algorithm. In this paper, we propose a new algorithm that first abstracts the target platform instructions into high-level uber-instructions, with each uber-instruction unifying multiple concrete instructions from the target platform. Program synthesis is used to lift input code sequences into semantically equivalent sequences of uber-instructions and then to lower from uber-instructions to machine code. Using 21 real-world benchmarks, we show that our synthesis-based instruction selection algorithm can generate instruction sequences for a hardware target, with the synthesized code performing up to 2.1x faster as compared to code generated by a professionally-developed optimizing compiler for the same platform.},
          <br>  booktitle = {Proceedings of the 27th ACM International Conference on Architectural Support for Programming Languages and Operating Systems},
          <br>  pages = {1004â€“1016},
          <br>  numpages = {13},
          <br>  keywords = {Instruction selection, program synthesis, compiler optimizations},
          <br>  location = {Lausanne, Switzerland},
          <br>  series = {ASPLOS '22}
          <br>}"
